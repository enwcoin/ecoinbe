openapi: 3.0.3
info:
  title: Ecoin
  version: 0.0.0
paths:
  /api/info:
    get:
      operationId: api_info_retrieve
      tags:
      - api
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
          description: ''
    post:
      operationId: api_info_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfo'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserInfo'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserInfo'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
          description: ''
  /api/order-items:
    get:
      operationId: api_order_items_retrieve
      tags:
      - api
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItem'
          description: ''
    post:
      operationId: api_order_items_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderItem'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderItem'
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItem'
          description: ''
    put:
      operationId: api_order_items_update
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderItem'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderItem'
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItem'
          description: ''
    delete:
      operationId: api_order_items_destroy
      tags:
      - api
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/orders:
    get:
      operationId: api_orders_retrieve
      tags:
      - api
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    post:
      operationId: api_orders_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Order'
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    put:
      operationId: api_orders_update
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Order'
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
  /api/orders/userid/{user_id}/:
    get:
      operationId: api_orders_userid_retrieve
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
  /api/products:
    get:
      operationId: list_all_products
      description: 'List all products short descriptions: name, price'
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductList'
          description: ''
    post:
      operationId: create_product
      description: Create a new product
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '201':
          description: Successfully created new product!
        '400':
          description: Failed to create new product or unauthorized.
  /api/products/{id}:
    get:
      operationId: retrieve_product_detail
      description: Retrieve details of a product by ID
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
        '404':
          description: No such product!
  /payment/create-checkout-session:
    post:
      operationId: payment_create_checkout_session_create
      description: Create a Stripe PaymentIntent and return the client secret.
      tags:
      - payment
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentSuccessed'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentFailed'
          description: ''
  /users/login:
    post:
      operationId: users_login_create
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserLogin'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserLogin'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLogin'
          description: ''
  /users/me:
    get:
      operationId: users_me_retrieve
      tags:
      - users
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /users/signup:
    post:
      operationId: users_signup_create
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegistration'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRegistration'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistration'
          description: ''
  /users/token:
    post:
      operationId: users_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /users/token/refresh:
    post:
      operationId: users_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
components:
  schemas:
    GenderEnum:
      enum:
      - M
      - FM
      - N
      type: string
      description: |-
        * `M` - Male
        * `FM` - Female
        * `N` - None
    Order:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        formatted_date_ordered:
          type: string
          readOnly: true
        complete:
          type: boolean
          nullable: true
        transaction_id:
          type: string
          format: uuid
          readOnly: true
        user:
          type: integer
          nullable: true
      required:
      - formatted_date_ordered
      - id
      - transaction_id
    OrderItem:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          readOnly: true
        unit_price:
          type: number
          format: float
          readOnly: true
        total_price:
          type: number
          format: float
          readOnly: true
        quantity:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        date_added:
          type: string
          format: date-time
          readOnly: true
        product:
          type: integer
          nullable: true
        order:
          type: integer
          nullable: true
      required:
      - date_added
      - id
      - name
      - total_price
      - unit_price
    PaginatedProductList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Product'
    PaymentFailed:
      type: object
      properties:
        error:
          type: string
      required:
      - error
    PaymentSuccessed:
      type: object
      properties:
        clientSecret:
          type: string
      required:
      - clientSecret
    Product:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          nullable: true
          maxLength: 200
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,18}(?:\.\d{0,2})?$
        digital:
          type: boolean
          nullable: true
        image:
          type: string
          format: uri
          nullable: true
        imageUploadURL:
          type: string
          nullable: true
          maxLength: 255
        isHotSaled:
          type: boolean
        brand:
          type: string
          maxLength: 50
        categories:
          type: string
          maxLength: 50
        model:
          type: string
          nullable: true
          maxLength: 50
        instock:
          type: boolean
        description:
          type: string
        updatedBy:
          type: string
          maxLength: 200
      required:
      - id
      - price
      - updatedBy
    TokenObtainPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - email
      - password
      - refresh
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        password:
          type: string
          maxLength: 128
        last_login:
          type: string
          format: date-time
          nullable: true
        username:
          type: string
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 255
        role:
          type: string
          maxLength: 10
        hashed_password:
          type: string
          maxLength: 255
        is_active:
          type: boolean
        is_staff:
          type: boolean
        is_superuser:
          type: boolean
        groups:
          type: array
          items:
            type: integer
          description: The groups this user belongs to. A user will get all permissions
            granted to each of their groups.
        user_permissions:
          type: array
          items:
            type: integer
          description: Specific permissions for this user.
      required:
      - email
      - hashed_password
      - id
      - password
      - username
    UserInfo:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        firstname:
          type: string
          maxLength: 50
        lastname:
          type: string
          maxLength: 50
        date_of_birth:
          type: string
          nullable: true
          maxLength: 50
        gender:
          $ref: '#/components/schemas/GenderEnum'
        email:
          type: string
          maxLength: 50
        phone:
          type: string
          maxLength: 10
        home_address:
          type: string
          maxLength: 50
        home_number:
          type: string
          maxLength: 50
        city:
          type: string
          maxLength: 50
        state:
          type: string
          maxLength: 50
        zip:
          type: string
          maxLength: 50
        bankname:
          type: string
          maxLength: 50
        account_holder:
          type: string
          maxLength: 50
        account_number:
          type: string
          maxLength: 20
        user:
          type: integer
          nullable: true
      required:
      - email
      - firstname
      - gender
      - id
      - lastname
      - phone
    UserLogin:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      required:
      - email
      - password
    UserRegistration:
      type: object
      properties:
        username:
          type: string
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 255
        role:
          type: string
          maxLength: 10
        password:
          type: string
      required:
      - email
      - password
      - username
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
